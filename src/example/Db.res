// generated by makeTableModule
module ArtistsTable = {
  type columns = {
    id: Ref.Typed.t<int>,
    name: Ref.Typed.t<string>,
  }

  type optionalColumns = {
    id: Ref.Typed.t<option<int>>,
    name: Ref.Typed.t<option<string>>,
  }

  type projectables = {artists: columns}

  type selectables = {artists: columns}

  type all = (Ref.Typed.t<int>, Ref.Typed.t<string>)

  let query: Query.t<projectables, selectables, all> = {
    from: {
      name: "artists",
      alias: "artists",
    },
    joins: [],
    selections: None,
    groupBys: [],
    havings: None,
    orderBys: [],
    projections: None->Obj.magic,
  }
}

// generated by makeTableModule
module AlbumsTable = {
  type columns = {
    id: Ref.Typed.t<int>,
    artistId: Ref.Typed.t<int>,
    name: Ref.Typed.t<string>,
    year: Ref.Typed.t<int>,
  }

  type optionalColumns = {
    id: Ref.Typed.t<option<int>>,
    name: Ref.Typed.t<option<string>>,
    artistId: Ref.Typed.t<option<int>>,
    year: Ref.Typed.t<option<int>>,
  }

  type projectables = {albums: columns}

  type selectables = {albums: columns}

  type all = (Ref.Typed.t<int>, Ref.Typed.t<int>, Ref.Typed.t<string>, Ref.Typed.t<int>)

  let query: Query.t<projectables, selectables, all> = {
    from: {
      name: "albums",
      alias: "albums",
    },
    joins: [],
    selections: None,
    groupBys: [],
    havings: None,
    orderBys: [],
    projections: None->Obj.magic,
  }
}

// generated by makeTableModule
module SongsTable = {
  type columns = {
    id: Ref.Typed.t<int>,
    albumId: Ref.Typed.t<int>,
    name: Ref.Typed.t<string>,
    duration: Ref.Typed.t<string>,
  }

  type optionalColumns = {
    id: Ref.Typed.t<option<int>>,
    albumId: Ref.Typed.t<option<int>>,
    name: Ref.Typed.t<option<string>>,
    duration: Ref.Typed.t<string>,
  }

  type projectables = {songs: columns}

  type selectables = {songs: columns}

  type all = (Ref.Typed.t<int>, Ref.Typed.t<int>, Ref.Typed.t<string>, Ref.Typed.t<string>)

  let query: Query.t<projectables, selectables, all> = {
    from: {
      name: "songs",
      alias: "songs",
    },
    joins: [],
    selections: None,
    groupBys: [],
    havings: None,
    orderBys: [],
    projections: None->Obj.magic,
  }
}

// generated by makeQueryModule albums inner join songs
module AlbumsInnerJoinSongs = {
  type projectables = {
    a: AlbumsTable.columns,
    s: SongsTable.columns,
  }

  type selectables = {
    a: AlbumsTable.columns,
    s: SongsTable.columns,
  }

  type all = (
    Ref.Typed.t<int>,
    Ref.Typed.t<int>,
    Ref.Typed.t<string>,
    Ref.Typed.t<int>,
    Ref.Typed.t<option<int>>,
    Ref.Typed.t<option<int>>,
    Ref.Typed.t<option<string>>,
    Ref.Typed.t<string>,
  )

  let query: Query.t<projectables, selectables, all> = {
    from: {name: "albums", alias: "a"},
    joins: [{table: {name: "songs", alias: "s"}, joinType: Left, condition: None}],
    selections: None,
    groupBys: [],
    havings: None,
    orderBys: [],
    projections: None->Obj.magic,
  }
}

// generated by makeQueryModule albums inner join albums
module AlbumsInnerJoinAlbums = {
  type projectables = {
    a1: AlbumsTable.columns,
    a2: AlbumsTable.columns,
  }

  type selectables = {
    a1: AlbumsTable.columns,
    a2: AlbumsTable.columns,
  }

  type all = (
    Ref.Typed.t<int>,
    Ref.Typed.t<int>,
    Ref.Typed.t<string>,
    Ref.Typed.t<int>,
    Ref.Typed.t<int>,
    Ref.Typed.t<int>,
    Ref.Typed.t<string>,
    Ref.Typed.t<int>,
  )

  let query: Query.t<projectables, selectables, all> = {
    from: {name: "albums", alias: "a1"},
    joins: [{table: {name: "albums", alias: "a2"}, joinType: Left, condition: None}],
    selections: None,
    groupBys: [],
    havings: None,
    orderBys: [],
    projections: None->Obj.magic,
  }
}

module ArtistsLeftJoinAlbums = {
  type projectables = {
    ar: ArtistsTable.columns,
    al: AlbumsTable.optionalColumns,
  }

  type selectables = {
    ar: ArtistsTable.columns,
    al: AlbumsTable.columns,
  }

  type all = (
    Ref.Typed.t<int>,
    Ref.Typed.t<string>,
    Ref.Typed.t<option<int>>,
    Ref.Typed.t<option<string>>,
    Ref.Typed.t<option<int>>,
    Ref.Typed.t<option<int>>,
  )

  let query: Query.t<projectables, selectables, all> = {
    from: {name: "artists", alias: "ar"},
    joins: [{table: {name: "albums", alias: "al"}, joinType: Left, condition: None}],
    selections: None,
    groupBys: [],
    havings: None,
    orderBys: [],
    projections: None->Obj.magic,
  }
}

// generated by makeQueryModule artists left join albums left join songs
// makeQueryModule(From(ArtistsTable, "ar"), [LeftJoin(AlbumsTable, "al", ("ar", ArtistsTable.id), ("al", AlbumsTable.artistId))])
module ArtistsLeftJoinAlbumsLeftJoinSongs = {
  type projectables = {
    ar: ArtistsTable.columns,
    al: AlbumsTable.optionalColumns,
    s: SongsTable.optionalColumns,
  }

  type selectables = {
    ar: ArtistsTable.columns,
    al: AlbumsTable.columns,
    s: SongsTable.columns,
  }

  type all = (
    Ref.Typed.t<int>,
    Ref.Typed.t<string>,
    Ref.Typed.t<option<int>>,
    Ref.Typed.t<option<string>>,
    Ref.Typed.t<option<int>>,
    Ref.Typed.t<option<int>>,
    Ref.Typed.t<option<int>>,
    Ref.Typed.t<option<int>>,
    Ref.Typed.t<option<string>>,
    Ref.Typed.t<string>,
  )

  let query: Query.t<projectables, selectables, all> = {
    from: {name: "artists", alias: "ar"},
    joins: [
      {table: {name: "albums", alias: "al"}, joinType: Left, condition: None},
      {table: {name: "songs", alias: "s"}, joinType: Left, condition: None},
    ],
    selections: None,
    groupBys: [],
    havings: None,
    orderBys: [],
    projections: None->Obj.magic,
  }
}
