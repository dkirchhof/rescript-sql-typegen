module type Table = {
  type projectables
  type optionalProjectables
  type selectables
}

module QB2: {
  type t<'projectables, 'selectables>
  /* let innerJoin: ( */
  /*   t<('p1, 'p2), ('s1, 's2)>, */
  /*   module(Table), */
  /* ) => t<('p1, 'p2), ('s1, 's2)> */
}

module QB1: {
  type t<'projectables, 'selectables>
  let innerJoin: (
    t<'p1, 's1>,
    module(Table with type projectables = 'a and type selectables = 'b),
  ) => QB2.t<('p1, 'a), ('s1, 'b)>
}

module QB: {
  let from: module(Table with type projectables = 'a and type selectables = 'b) => QB1.t<'a, 'b>
}
