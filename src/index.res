// generated by CodeGen.makeTableModule(artists)
module ArtistsTable = {
  let tableName = "artists"

  type projectables = {
    id: int,
    name: string,
  }

  type optionalProjectables = {
    id: option<int>,
    name: option<string>,
  }

  type selectables = {
    id: Column.t<int>,
    name: Column.t<string>,
  }
}

// generated by CodeGen.makeTableModule(songs)
module SongsTable = {
  type projectables = {
    id: int,
    artist: int,
    title: string,
  }

  type optionalProjectables = {
    id: option<int>,
    artist: option<int>,
    title: option<string>,
  }

  type selectables = {
    id: Column.t<int>,
    artist: Column.t<int>,
    title: Column.t<string>,
  }
}

// generated by CodeGen.makeQueryModule(From(artists, "a"), [LeftJoin(artists, "s")])
module MyQuery = {
  open Query

  type tables = {
    a: Table.t,
    s: Table.t,
  }

  type projectables = {
    a: ArtistsTable.projectables,
    s: SongsTable.optionalProjectables,
  }

  type selectables = {
    a: ArtistsTable.selectables,
    s: SongsTable.selectables,
  }

  let query = {
    projections: None,
    from: {tableName: "artists", alias: "a"},
    joins: [{table: {name: "songs", alias: "s"}, joinType: LeftJoin, on: None}],
    selection: None,
  }
}

module MySubQuery = {
  open Query

  type tables = {
    a: Table.t,
  }

  type projectables = {
    a: ArtistsTable.projectables,
  }

  type selectables = {
    a: ArtistsTable.selectables,
  }

  let query = {
    projections: None,
    from: {tableName: "artists", alias: "a"},
    joins: [],
    selection: None,
  }
}

module MyQB = QueryBuilder.Make(MyQuery)
module MySQB = QueryBuilder.Make(MySubQuery)

let subQuery = MySubQuery.query->MySQB.select(t => t.a.id)

MyQuery.query
->MyQB.select(t => (t.a.id, t.a.name, t.s.id, t.s.artist, t.s.title))
->MyQB.join(t => t.s, t => (t.a.id, t.s.artist))
->MyQB.where(t => Eq(Column(t.a.name), Value("Architects")))
/* ->MyQB.where(t => Eq(Column(t.a.id), SubQuery(subQuery->Query.asSubQuery))) */
/* ->MyQB.where(t => And([Eq(Column(t.a.id), Column(t.s.id)), Neq(Column(t.a.id), Column(t.s.artist))])) */
/* ->MyQB.where(t => And([Eq(Column(t.a.id), Value(1)), Eq(Column(t.a.id), Value(""))])) */
->Query.toSQL
->Js.log
